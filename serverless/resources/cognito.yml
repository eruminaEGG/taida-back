# cognito.yml
Resources:
  # User Poolの設定
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: ${self:custom.prefix}-UserPool
      MfaConfiguration: OFF
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: ${self:custom.prefix}
      UserPoolId:
        Ref: UserPool

  UserPoolIdentityProviderGoogle:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      ProviderName: Google
      UserPoolId:
        Ref: UserPool
      ProviderType: Google
      ProviderDetails:
        client_id: ${env:GOOGLE_CLIENT_ID}
        client_secret: ${env:GOOGLE_CLIENT_SECRET}
        authorize_scopes: "openid email profile"
      AttributeMapping:
        email: email

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: ${self:custom.prefix}-UserPoolClient
      UserPoolId:
        Ref: UserPool
      GenerateSecret: false
      IdTokenValidity: 1
      AccessTokenValidity: 1
      RefreshTokenValidity: 30
      TokenValidityUnits:
        IdToken: hours
        AccessToken: hours
        RefreshToken: days
      EnableTokenRevocation: true
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      CallbackURLs:
        - http://${env:DOMAIN}/login/callback
      LogoutURLs:
        - http://${env:DOMAIN}/login
      SupportedIdentityProviders:
        - Google
    DependsOn:
      - UserPoolIdentityProviderGoogle

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: ${self:custom.prefix}-IdentityPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId:
            Ref: UserPoolClient
          ProviderName:
            Fn::GetAtt:
              - UserPool
              - ProviderName

  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId:
        Ref: IdentityPool
      Roles:
        authenticated:
          Fn::GetAtt:
            - IdentityPoolAuthRole
            - Arn
        unauthenticated:
          Fn::GetAtt:
            - IdentityPoolUnauthRole
            - Arn
      RoleMappings:
        UserPool:
          IdentityProvider:
            Fn::Join:
              - ":"
              - - Fn::GetAtt: [UserPool, ProviderName]
                - Ref: UserPoolClient
          Type: Token
          ambiguousRoleResolution: AuthenticatedRole

  GeneralUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      GroupName: ${self:custom.generalUserGroup}
      UserPoolId:
        Ref: UserPool
      RoleArn:
        Fn::GetAtt:
          - GeneralUserRole
          - Arn

Outputs:
  UserPoolId:
    Value:
      Ref: UserPool
    Export:
      Name: ${self:custom.prefix}-UserPoolId
  UserPoolClientId:
    Value:
      Ref: UserPoolClient
    Export:
      Name: ${self:custom.prefix}-UserPoolClientId
  IdentityPoolId:
    Value:
      Ref: IdentityPool
    Export:
      Name: ${self:custom.prefix}-IdentityPoolId
