# serverless.yml
service: taida-back
frameworkVersion: "3"
useDotenv: true

provider:
  name: aws
  runtime: python3.11
  architecture: arm64
  timeout: 30
  iam:
    role: LambdaExecutionRole
  layers:
    - Ref: PythonRequirementsLambdaLayer

  region: ap-northeast-1
  stage: ${opt:stage, 'dev'}

  # API Gateway
  # apiName: ${self:custom.apiName}

  environment:
    STAGE_NAME: ${self:provider.stage}
    DOMAIN: ${env:DOMAIN}

    USER_TABLE_NAME: ${self:custom.userTableName}
    SITE_TABLE_NAME: ${self:custom.siteTableName}
    ARTICLE_TABLE_NAME: ${self:custom.articleTableName}

    # Cognito
    # COGNITO_USER_POOL_ID: !Ref UserPool
    # COGNITO_USER_POOL_CLIENT_ID: !Ref UserPoolClient
    # COGNITO_IDENTITY_POOL_ID: !Ref IdentityPool

custom:
  prefix: ${self:service}-${self:provider.stage}

  # DynamoDB
  userTableName: ${self:custom.prefix}-userTable
  siteTableName: ${self:custom.prefix}-siteTable
  articleTableName: ${self:custom.prefix}-articleTable

  # API Gateway
  # apiName: ${self:custom.prefix}-api
  pythonRequirements:
    dockerizePip: true
    layer: true

package:
  include:
    - taida_back/**
  exclude:
    - "**"

plugins:
  - serverless-python-requirements

# functions: ${file(./serverless/functions.yml)}

resources:
  # - ${file(./serverless/resources/cognito.yml)}
  - ${file(./serverless/resources/dynamodb.yml)}
  - ${file(./serverless/resources/iam.yml)}
